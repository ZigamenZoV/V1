"""
–î–µ—Ç–µ–∫—Ç–æ—Ä —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –±–∞–≥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–¥—Å—á–µ—Ç–∞ –ª—é–¥–µ–π
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–µ –ø—Ä–æ—è–≤–∏—Ç—å—Å—è –≤ –æ–±—ã—á–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
"""

import sys
import os
import numpy as np
import cv2
import time
import traceback
from unittest.mock import patch, MagicMock
import warnings

warnings.filterwarnings("ignore")


class SpecificBugDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –±–∞–≥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ"""

    def __init__(self):
        self.bugs_found = []
        self.test_results = {}

    def run_all_bug_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –±–∞–≥–∏"""
        print("üêõ Detecting specific bugs in People Counter System")
        print("=" * 60)

        bug_tests = [
            ("Memory Management Issues", self.test_memory_management_bugs),
            ("Thread Safety Issues", self.test_thread_safety_bugs),
            ("Video Processing Bugs", self.test_video_processing_bugs),
            ("Tracker State Bugs", self.test_tracker_state_bugs),
            ("Counter Logic Bugs", self.test_counter_logic_bugs),
            ("Group Movement Logic", self.test_group_movement_logic),  # –ù–û–í–´–ô –¢–ï–°–¢
            ("File I/O Bugs", self.test_file_io_bugs),
            ("Edge Case Bugs", self.test_edge_case_bugs),
            ("Performance Bugs", self.test_performance_bugs),
            ("Resource Cleanup Bugs", self.test_resource_cleanup_bugs)
        ]

        total_tests = len(bug_tests)
        passed_tests = 0

        for test_name, test_func in bug_tests:
            print(f"\nüîç {test_name}...")
            try:
                if test_func():
                    print(f"‚úÖ {test_name}: PASSED")
                    passed_tests += 1
                    self.test_results[test_name] = "PASSED"
                else:
                    print(f"‚ùå {test_name}: FAILED")
                    self.test_results[test_name] = "FAILED"
            except Exception as e:
                print(f"üí• {test_name}: ERROR - {e}")
                self.test_results[test_name] = f"ERROR: {e}"
                traceback.print_exc()

        self.print_summary(passed_tests, total_tests)
        return passed_tests == total_tests

    def test_memory_management_bugs(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–≥–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é"""
        bugs_found = False

        # –¢–µ—Å—Ç 1: –£—Ç–µ—á–∫–∞ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–¥—Ä–æ–≤
        try:
            import psutil
            process = psutil.Process(os.getpid())
            initial_memory = process.memory_info().rss

            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É 1000 –∫–∞–¥—Ä–æ–≤
            for i in range(1000):
                test_frame = np.random.randint(0, 255, (1080, 1920, 3), dtype=np.uint8)
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é
                del test_frame

                if i % 100 == 0:
                    current_memory = process.memory_info().rss
                    memory_growth = current_memory - initial_memory
                    if memory_growth > 500 * 1024 * 1024:  # –ë–æ–ª–µ–µ 500MB
                        self.bugs_found.append("Excessive memory growth during frame processing")
                        bugs_found = True
                        break

        except ImportError:
            print("   ‚ö†Ô∏è  psutil not available, skipping memory test")

        # –¢–µ—Å—Ç 2: –ù–µ–æ—á–∏—â–µ–Ω–Ω—ã–µ numpy –º–∞—Å—Å–∏–≤—ã
        try:
            large_arrays = []
            for i in range(100):
                arr = np.zeros((1000, 1000, 3), dtype=np.float64)
                large_arrays.append(arr)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–∞—Å—Å–∏–≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–¥–∞–ª—è—é—Ç—Å—è
            del large_arrays
            import gc
            gc.collect()

        except MemoryError:
            self.bugs_found.append("Memory allocation issues with large numpy arrays")
            bugs_found = True

        return not bugs_found

    def test_thread_safety_bugs(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–≥–æ–≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏"""
        bugs_found = False

        try:
            from people_counter.tracker import DeepSORTTracker
            from people_counter.config import Config
            import threading

            config = Config()
            tracker = DeepSORTTracker(config)

            errors = []

            def worker_thread(thread_id):
                try:
                    for i in range(50):
                        test_frame = np.random.randint(0, 255, (480, 640, 3), dtype=np.uint8)
                        # –ü–æ–ø—ã—Ç–∫–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–µ–∫–µ—Ä—É
                        detections = []
                        tracker.update(detections, test_frame)
                except Exception as error:
                    errors.append(f"Thread {thread_id}: {error}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            threads = []
            for i in range(3):
                t = threading.Thread(target=worker_thread, args=(i,))
                threads.append(t)
                t.start()

            for t in threads:
                t.join()

            if errors:
                self.bugs_found.append(f"Thread safety issues: {errors[:3]}")
                bugs_found = True

        except ImportError:
            print("   ‚ö†Ô∏è  Cannot import tracker, skipping thread safety test")
        except Exception as error:
            if "concurrent access" in str(error).lower():
                bugs_found = True

        return not bugs_found

    def test_video_processing_bugs(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–≥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"""
        bugs_found = False

        # –¢–µ—Å—Ç 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤
        corrupted_frames = [
            None,
            np.array([]),
            np.zeros((10, 10), dtype=np.uint8),  # 2D –≤–º–µ—Å—Ç–æ 3D
            np.zeros((480, 640, 1), dtype=np.uint8),  # –û–¥–Ω–æ–∫–∞–Ω–∞–ª—å–Ω–æ–µ
            np.zeros((480, 640, 4), dtype=np.uint8),  # 4 –∫–∞–Ω–∞–ª–∞
            np.full((480, 640, 3), 255, dtype=np.uint8),  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        ]

        try:
            from people_counter.detector import YOLODetector
            from people_counter.config import Config

            config = Config()
            detector = YOLODetector(config)

            for i, test_frame in enumerate(corrupted_frames):
                try:
                    detection_results, time_taken = detector.detect(test_frame)
                    # –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–æ—Å–∏–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if not isinstance(detection_results, list):
                        self.bugs_found.append(f"Detector returns non-list for corrupted frame {i}")
                        bugs_found = True
                except Exception as error:
                    # –û–∂–∏–¥–∞–µ–º–æ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤
                    if "unexpected" in str(error).lower():
                        bugs_found = True

        except ImportError:
            print("   ‚ö†Ô∏è  Cannot import detector, skipping video processing test")

        # –¢–µ—Å—Ç 2: –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–∞–¥—Ä–æ–≤
        unusual_sizes = [
            (1, 1, 3),
            (10000, 10000, 3),  # –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π
            (480, 1, 3),  # –û—á–µ–Ω—å —É–∑–∫–∏–π
            (1, 640, 3),  # –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π
        ]

        for size in unusual_sizes:
            try:
                if np.prod(size) > 1000000:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ
                    continue
                test_frame = np.zeros(size, dtype=np.uint8)
                # –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            except MemoryError:
                continue  # –û–∂–∏–¥–∞–µ–º–æ –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤

        return not bugs_found

    def test_tracker_state_bugs(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–≥–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—Ä–µ–∫–µ—Ä–∞"""
        bugs_found = False

        try:
            from people_counter.tracker import DeepSORTTracker
            from people_counter.entities import Detection
            from people_counter.config import Config

            config = Config()
            tracker = DeepSORTTracker(config)

            # –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ track_id
            for i in range(100000, 100010):  # –ë–æ–ª—å—à–∏–µ ID
                test_detection = Detection(bbox=(10, 10, 50, 50), confidence=0.8, class_id=0)
                test_frame = np.zeros((480, 640, 3), dtype=np.uint8)

                try:
                    tracker.update([test_detection], test_frame)
                except OverflowError:
                    self.bugs_found.append("Track ID overflow error")
                    bugs_found = True
                    break

            # –¢–µ—Å—Ç 2: –°–±—Ä–æ—Å —Ç—Ä–µ–∫–µ—Ä–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            reset_detection = Detection(bbox=(10, 10, 50, 50), confidence=0.8, class_id=0)
            reset_frame = np.zeros((480, 640, 3), dtype=np.uint8)

            tracker.update([reset_detection], reset_frame)
            tracker.reset()

            # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
            try:
                tracker.update([reset_detection], reset_frame)
            except AttributeError as error:
                if "nonetype" in str(error).lower():
                    self.bugs_found.append("Tracker not properly reinitialized after reset")
                    bugs_found = True

        except ImportError:
            print("   ‚ö†Ô∏è  Cannot import tracker components, skipping tracker state test")

        return not bugs_found

    def test_counter_logic_bugs(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–≥–æ–≤ –ª–æ–≥–∏–∫–∏ —Å—á–µ—Ç—á–∏–∫–∞"""
        bugs_found = False

        try:
            from people_counter.line_counter import LineCounter
            from people_counter.entities import Detection
            from people_counter.config import Config

            config = Config()
            counter = LineCounter(config)

            # –¢–µ—Å—Ç 1: –î–≤–æ–π–Ω–æ–π –ø–æ–¥—Å—á–µ—Ç –ø—Ä–∏ –±—ã—Å—Ç—Ä—ã—Ö –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è—Ö
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Å—Ü–∏–ª–ª–∏—Ä—É–µ—Ç –æ–∫–æ–ª–æ –ª–∏–Ω–∏–∏

            positions = [
                (340, 300),  # –°–ª–µ–≤–∞ –æ—Ç –ª–∏–Ω–∏–∏ (X=350)
                (360, 300),  # –°–ø—Ä–∞–≤–∞ –æ—Ç –ª–∏–Ω–∏–∏ - –¥–æ–ª–∂–Ω–æ –∑–∞—Å—á–∏—Ç–∞—Ç—å –≤—Ö–æ–¥
                (340, 300),  # –û–±—Ä–∞—Ç–Ω–æ —Å–ª–µ–≤–∞ - –¥–æ–ª–∂–Ω–æ –∑–∞—Å—á–∏—Ç–∞—Ç—å –≤—ã—Ö–æ–¥
                (360, 300),  # –°–Ω–æ–≤–∞ —Å–ø—Ä–∞–≤–∞ - –ù–ï –¥–æ–ª–∂–Ω–æ –∑–∞—Å—á–∏—Ç–∞—Ç—å –∏–∑-–∑–∞ debounce
                (340, 300),  # –û–±—Ä–∞—Ç–Ω–æ —Å–ª–µ–≤–∞ - –ù–ï –¥–æ–ª–∂–Ω–æ –∑–∞—Å—á–∏—Ç–∞—Ç—å –∏–∑-–∑–∞ debounce
            ]

            initial_count = counter.in_count + counter.out_count

            for i, pos in enumerate(positions):
                bbox = (pos[0] - 20, pos[1] - 50, pos[0] + 20, pos[1])
                detection = Detection(bbox=bbox, confidence=0.9, class_id=0, tracker_id=1)

                counter.update([detection])

                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è debounce
                if i > 1:
                    import time
                    time.sleep(0.1)

            final_count = counter.in_count + counter.out_count

            # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞–∫—Å–∏–º—É–º 2 –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è (–≤—Ö–æ–¥ + –≤—ã—Ö–æ–¥) –∏–∑-–∑–∞ debounce
            if final_count - initial_count > 2:
                self.bugs_found.append(
                    f"Double counting detected: {final_count - initial_count} crossings for oscillating movement")
                bugs_found = True

            # –¢–µ—Å—Ç 2: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–Ω—É—Ç—Ä–∏ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
            counter.stats['inside'] = 5

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            for _ in range(6):
                counter.stats['out'] += 1
                counter.stats['inside'] = max(0, counter.stats['in'] - counter.stats['out'])

            if counter.current_inside < 0:
                self.bugs_found.append("Negative count inside detected")
                bugs_found = True

        except ImportError:
            print("   ‚ö†Ô∏è  Cannot import counter components, skipping counter logic test")
        except AttributeError as e:
            if "no setter" in str(e):
                self.bugs_found.append("Missing setter for current_inside property")
                bugs_found = True
            else:
                print(f"   ‚ö†Ô∏è  AttributeError in counter logic test: {e}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Error in counter logic test: {e}")
            bugs_found = True

        return not bugs_found

    def test_group_movement_logic(self):
        """ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è"""
        bugs_found = False

        try:
            from people_counter.line_counter import LineCounter
            from people_counter.entities import Detection
            from people_counter.config import Config

            config = Config()
            counter = LineCounter(config)

            print("   üë• Testing group movement logic (3 people entering, 2 exiting)")
            print(f"   üìè Line coordinates: {config.LINE_START} -> {config.LINE_END}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–∏–Ω–∏—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –Ω–∞ X=350
            line_x = config.LINE_START[0]
            print(f"   üìç Testing crossings at X={line_x}")

            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏–π
            movements = [
                # –ß–µ–ª–æ–≤–µ–∫ 1: —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ (–≤—Ö–æ–¥)
                (1, [(320, 300), (370, 300)]),
                # –ß–µ–ª–æ–≤–µ–∫ 2: —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ (–≤—Ö–æ–¥)
                (2, [(320, 320), (370, 320)]),
                # –ß–µ–ª–æ–≤–µ–∫ 3: —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ (–≤—Ö–æ–¥)
                (3, [(320, 340), (370, 340)]),
                # –ß–µ–ª–æ–≤–µ–∫ 1: —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ (–≤—ã—Ö–æ–¥)
                (1, [(370, 300), (320, 300)]),
                # –ß–µ–ª–æ–≤–µ–∫ 2: —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ (–≤—ã—Ö–æ–¥)
                (2, [(370, 320), (320, 320)]),
                # –ß–µ–ª–æ–≤–µ–∫ 3 –æ—Å—Ç–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏
            ]

            expected_results = [
                (1, 0, 1),  # –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ 1
                (2, 0, 2),  # –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ 2
                (3, 0, 3),  # –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ 3
                (3, 1, 2),  # –ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ 1
                (3, 2, 1),  # –ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ 2
            ]

            current_detections = {}  # –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ—Ç–µ–∫—Ü–∏–∏

            for step, (track_id, positions) in enumerate(movements):
                if len(positions) == 2:  # –ï—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ
                    # –ü–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
                    pos1 = positions[0]
                    bbox1 = (pos1[0] - 15, pos1[1] - 25, pos1[0] + 15, pos1[1])
                    detection1 = Detection(bbox=bbox1, confidence=0.9, class_id=0, tracker_id=track_id)
                    current_detections[track_id] = detection1

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å –ø–µ—Ä–≤–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
                    counter.update(list(current_detections.values()))

                    # –í—Ç–æ—Ä–∞—è –ø–æ–∑–∏—Ü–∏—è (–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ)
                    pos2 = positions[1]
                    bbox2 = (pos2[0] - 15, pos2[1] - 25, pos2[0] + 15, pos2[1])
                    detection2 = Detection(bbox=bbox2, confidence=0.9, class_id=0, tracker_id=track_id)
                    current_detections[track_id] = detection2

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ–º
                    stats = counter.update(list(current_detections.values()))

                    print(f"   Step {step + 1}: Track {track_id} moved {pos1}->{pos2}")
                    print(f"   Result: in={stats['in']}, out={stats['out']}, inside={stats['inside']}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if step < len(expected_results):
                        exp_in, exp_out, exp_inside = expected_results[step]
                        if (stats['in'] != exp_in or stats['out'] != exp_out or stats['inside'] != exp_inside):
                            self.bugs_found.append(
                                f"Group movement logic error at step {step + 1}: "
                                f"expected (in={exp_in}, out={exp_out}, inside={exp_inside}), "
                                f"got (in={stats['in']}, out={stats['out']}, inside={stats['inside']})"
                            )
                            bugs_found = True
                            break

            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ –±–µ–∑ –æ—à–∏–±–æ–∫
            if not bugs_found:
                final_stats = counter.update(list(current_detections.values()))
                if final_stats['inside'] != 1 or final_stats['in'] != 3 or final_stats['out'] != 2:
                    self.bugs_found.append(
                        f"Final verification failed: expected (in=3, out=2, inside=1), "
                        f"got (in={final_stats['in']}, out={final_stats['out']}, inside={final_stats['inside']})"
                    )
                    bugs_found = True
                else:
                    print(
                        f"   ‚úÖ Final result: in={final_stats['in']}, out={final_stats['out']}, inside={final_stats['inside']}")

        except ImportError:
            print("   ‚ö†Ô∏è  Cannot import counter components, skipping group movement test")
            return True
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Error in group movement test: {e}")
            import traceback
            traceback.print_exc()
            bugs_found = True

        return not bugs_found

    def test_file_io_bugs(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–≥–æ–≤ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞"""
        bugs_found = False

        try:
            from people_counter.logger import Logger
            from people_counter.config import Config
            from people_counter.entities import FrameStats
            from datetime import datetime
            import tempfile

            # –¢–µ—Å—Ç 1: –ó–∞–ø–∏—Å—å –≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —Ñ–∞–π–ª
            config = Config()
            config.CSV_LOG_PATH = "/root/impossible_path/log.csv"  # –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—É—Ç—å

            try:
                test_logger = Logger(config)
                stats = FrameStats(
                    frame_number=1, processing_time=0.1, detections_count=1,
                    tracks_count=1, fps=10.0, timestamp=datetime.now()
                )
                test_logger.log_frame(stats, {'in': 1, 'out': 0, 'inside': 1})
            except PermissionError:
                pass  # –û–∂–∏–¥–∞–µ–º–æ
            except Exception as error:
                if "permission" not in str(error).lower():
                    self.bugs_found.append(f"Unexpected error for inaccessible file: {error}")
                    bugs_found = True

            # –¢–µ—Å—Ç 2: –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º—è –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            with tempfile.NamedTemporaryFile(delete=False) as tmp:
                config.CSV_LOG_PATH = tmp.name
                test_logger = Logger(config)

                try:
                    stats = FrameStats(
                        frame_number=1, processing_time=0.1, detections_count=1,
                        tracks_count=1, fps=10.0, timestamp=datetime.now()
                    )
                    test_logger.log_frame(stats, {'in': 1, 'out': 0, 'inside': 1})
                except Exception:
                    pass  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –æ–∂–∏–¥–∞–µ–º–æ –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö

                try:
                    os.unlink(tmp.name)
                except PermissionError:
                    pass

        except ImportError:
            print("   ‚ö†Ô∏è  Cannot import logger, skipping file I/O test")

        return not bugs_found

    def test_edge_case_bugs(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–≥–æ–≤ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
        bugs_found = False

        # –¢–µ—Å—Ç 1: –ü—É—Å—Ç—ã–µ –¥–µ—Ç–µ–∫—Ü–∏–∏
        try:
            from people_counter.tracker import DeepSORTTracker
            from people_counter.config import Config

            config = Config()
            tracker = DeepSORTTracker(config)

            test_frame = np.zeros((480, 640, 3), dtype=np.uint8)

            # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            for _ in range(1000):
                tracker.update([], test_frame)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç—Ä–µ–∫–µ—Ä –Ω–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç –º—É—Å–æ—Ä
            if len(tracker.track_history) > 0:
                self.bugs_found.append("Tracker accumulates empty tracks")
                bugs_found = True

        except ImportError:
            print("   ‚ö†Ô∏è  Cannot import tracker for edge case test")

        # –¢–µ—Å—Ç 2: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        try:
            from people_counter.entities import Detection

            extreme_coords = [
                (-1000, -1000, -500, -500),  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ
                (0, 0, 0, 0),  # –ù—É–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                (100, 100, 50, 50),  # x2 < x1, y2 < y1
                (float('inf'), 0, 100, 100),  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å
                (0, float('nan'), 100, 100),  # NaN
            ]

            for coords in extreme_coords:
                try:
                    test_detection = Detection(bbox=coords, confidence=0.8, class_id=0)
                except (ValueError, OverflowError):
                    pass  # –û–∂–∏–¥–∞–µ–º–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                except Exception as error:
                    if "unexpected" in str(error).lower():
                        self.bugs_found.append(f"Unexpected error for extreme coordinates: {error}")
                        bugs_found = True

        except ImportError:
            print("   ‚ö†Ô∏è  Cannot import entities for edge case test")

        return not bugs_found

    def test_performance_bugs(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–Ω—ã—Ö –±–∞–≥–æ–≤"""
        bugs_found = False

        # –¢–µ—Å—Ç 1: –î–µ–≥—Ä–∞–¥–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç—Ä–µ–∫–æ–≤
        try:
            from people_counter.line_counter import LineCounter
            from people_counter.entities import TrackInfo
            from people_counter.config import Config

            config = Config()
            counter = LineCounter(config)

            # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤
            tracks = []
            for i in range(1000):
                track = TrackInfo(track_id=i, positions=[(100 + i, 200 + i)])
                tracks.append(track)

            start_time = time.time()
            counter.update([], tracks)
            processing_time = time.time() - start_time

            # –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è 1000 —Ç—Ä–µ–∫–æ–≤
            if processing_time > 1.0:
                self.bugs_found.append(
                    f"Performance degradation with many tracks: {processing_time:.2f}s for 1000 tracks")
                bugs_found = True

        except ImportError:
            print("   ‚ö†Ô∏è  Cannot import counter for performance test")

        # –¢–µ—Å—Ç 2: –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö –∫–∞–¥—Ä–æ–≤
        try:
            from people_counter.detector import YOLODetector
            from people_counter.config import Config

            config = Config()
            detector = YOLODetector(config)

            # –ë–æ–ª—å—à–æ–π –∫–∞–¥—Ä
            large_frame = np.random.randint(0, 255, (2160, 3840, 3), dtype=np.uint8)  # 4K

            start_time = time.time()
            detection_results, inference_time = detector.detect(large_frame)
            total_time = time.time() - start_time

            # –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ 10 —Å–µ–∫—É–Ω–¥
            if total_time > 10.0:
                self.bugs_found.append(f"Very slow processing for 4K frame: {total_time:.2f}s")
                bugs_found = True

        except ImportError:
            print("   ‚ö†Ô∏è  Cannot import detector for performance test")
        except Exception as error:
            if "memory" in str(error).lower():
                pass  # –û–∂–∏–¥–∞–µ–º–æ –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –∫–∞–¥—Ä–æ–≤

        return not bugs_found

    def test_resource_cleanup_bugs(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–≥–æ–≤ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        bugs_found = False

        # –¢–µ—Å—Ç 1: –ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã
        try:
            import psutil

            process = psutil.Process(os.getpid())
            initial_files = process.num_fds() if hasattr(process, 'num_fds') else 0

            # –°–∏–º—É–ª–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏
            from people_counter.logger import Logger
            from people_counter.config import Config

            for i in range(50):
                config = Config()
                config.CSV_LOG_PATH = f"temp_log_{i}.csv"
                test_logger = Logger(config)
                del test_logger

                try:
                    os.remove(f"temp_log_{i}.csv")
                except FileNotFoundError:
                    pass

            final_files = process.num_fds() if hasattr(process, 'num_fds') else 0
            file_growth = final_files - initial_files

            if file_growth > 10:
                self.bugs_found.append(f"File descriptor leak: {file_growth} files not closed")
                bugs_found = True

        except ImportError:
            print("   ‚ö†Ô∏è  psutil not available for resource cleanup test")

        # –¢–µ—Å—Ç 2: OpenCV —Ä–µ—Å—É—Ä—Å—ã
        try:
            caps = []
            for i in range(10):
                cap = cv2.VideoCapture(0)  # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É
                if cap.isOpened():
                    caps.append(cap)
                else:
                    break

            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–≤–∏–Ω—É
            for i in range(len(caps) // 2):
                caps[i].release()

            # –û—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã —Å–±–æ—Ä—â–∏–∫–æ–º –º—É—Å–æ—Ä–∞
            del caps

        except Exception:
            pass  # –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–∞–º–µ—Ä–æ–π –æ–∂–∏–¥–∞–µ–º—ã –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ

        return not bugs_found

    def print_summary(self, passed_tests, total_tests):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 60)
        print("üêõ BUG DETECTION SUMMARY")
        print("=" * 60)

        print(f"Tests passed: {passed_tests}/{total_tests}")
        print(f"Tests failed: {total_tests - passed_tests}/{total_tests}")

        if self.bugs_found:
            print(f"\n‚ùå BUGS FOUND ({len(self.bugs_found)}):")
            for i, bug in enumerate(self.bugs_found, 1):
                print(f"   {i}. {bug}")
        else:
            print("\n‚úÖ No specific bugs detected!")

        print("\nüìä DETAILED RESULTS:")
        for test_name, result in self.test_results.items():
            status_emoji = "‚úÖ" if result == "PASSED" else "‚ùå" if result == "FAILED" else "üí•"
            print(f"   {status_emoji} {test_name}: {result}")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        if self.bugs_found:
            print("\nüí° RECOMMENDATIONS:")
            recommendations = self.generate_bug_fix_recommendations()
            for rec in recommendations:
                print(f"   ‚Ä¢ {rec}")

    def generate_bug_fix_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–∞–≥–æ–≤"""
        recommendations = []

        bug_categories = {
            'memory': [
                "Implement proper memory management with context managers",
                "Add memory usage monitoring and alerts",
                "Use memory profilers to identify leaks"
            ],
            'thread': [
                "Add thread synchronization with locks",
                "Implement thread-safe data structures",
                "Consider using queue-based communication"
            ],
            'counter': [
                "Add state validation in counter logic",
                "Implement debouncing for rapid crossings",
                "Add bounds checking for negative counts"
            ],
            'performance': [
                "Implement frame rate limiting",
                "Add performance monitoring",
                "Optimize algorithms for large datasets"
            ],
            'resource': [
                "Use context managers for all resources",
                "Implement proper cleanup in finally blocks",
                "Add resource monitoring"
            ]
        }

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –±–∞–≥–∏ –∏ –ø–æ–¥–±–∏—Ä–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        for bug in self.bugs_found:
            bug_lower = bug.lower()

            if any(word in bug_lower for word in ['memory', 'leak']):
                recommendations.extend(bug_categories['memory'][:1])
            elif any(word in bug_lower for word in ['thread', 'concurrent']):
                recommendations.extend(bug_categories['thread'][:1])
            elif any(word in bug_lower for word in ['count', 'negative']):
                recommendations.extend(bug_categories['counter'][:1])
            elif any(word in bug_lower for word in ['performance', 'slow']):
                recommendations.extend(bug_categories['performance'][:1])
            elif any(word in bug_lower for word in ['file', 'resource']):
                recommendations.extend(bug_categories['resource'][:1])

        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        recommendations = list(dict.fromkeys(recommendations))

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if not recommendations:
            recommendations = [
                "Continue monitoring system behavior in production",
                "Implement comprehensive logging",
                "Add automated testing to CI/CD pipeline"
            ]

        return recommendations[:5]  # –¢–æ–ø-5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π


class SystemIntegrityChecker:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""

    @staticmethod
    def check_dependencies():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("\nüîç Checking system dependencies...")

        required_packages = [
            ('cv2', 'opencv-python', 'Computer vision operations'),
            ('numpy', 'numpy', 'Numerical computations'),
            ('ultralytics', 'ultralytics', 'YOLO object detection'),
            ('deep_sort_realtime', 'deep-sort-realtime', 'Object tracking'),
            ('torch', 'torch', 'PyTorch backend for YOLO'),
        ]

        missing_packages = []

        for package, pip_name, description in required_packages:
            try:
                __import__(package)
                print(f"   ‚úÖ {pip_name}: OK")
            except ImportError:
                print(f"   ‚ùå {pip_name}: MISSING - {description}")
                missing_packages.append(pip_name)

        if missing_packages:
            print(f"\nüì¶ Install missing packages:")
            print(f"   pip install {' '.join(missing_packages)}")
            return False

        return True

    @staticmethod
    def check_file_structure():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤"""
        print("\nüìÅ Checking file structure...")

        required_files = [
            ('run.py', 'Main application entry point'),
            ('people_counter/__init__.py', 'Package initialization'),
            ('people_counter/config.py', 'Configuration module'),
            ('people_counter/entities.py', 'Data structures'),
            ('people_counter/detector.py', 'YOLO detector'),
            ('people_counter/tracker.py', 'DeepSORT tracker'),
            ('people_counter/line_counter.py', 'Line crossing counter'),
            ('people_counter/visualizer.py', 'Visualization module'),
            ('people_counter/logger.py', 'Logging module'),
        ]

        missing_files = []

        for file_path, description in required_files:
            if os.path.exists(file_path):
                print(f"   ‚úÖ {file_path}: OK")
            else:
                print(f"   ‚ùå {file_path}: MISSING - {description}")
                missing_files.append(file_path)

        return len(missing_files) == 0

    @staticmethod
    def check_model_availability():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π"""
        print("\nüß† Checking model availability...")

        try:
            from ultralytics import YOLO

            # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
            try:
                test_model = YOLO('yolov8m.pt')
                print("   ‚úÖ YOLO model: OK")
                return True
            except Exception as error:
                print(f"   ‚ùå YOLO model: FAILED - {error}")
                print("   üí° Model will be downloaded on first run")
                return False

        except ImportError:
            print("   ‚ùå ultralytics not available")
            return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    print("üéØ People Counter System - Comprehensive Bug Detection")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
    integrity_checker = SystemIntegrityChecker()

    deps_ok = integrity_checker.check_dependencies()
    files_ok = integrity_checker.check_file_structure()
    models_ok = integrity_checker.check_model_availability()

    if not deps_ok:
        print("\n‚ö†Ô∏è  Cannot proceed without required dependencies")
        return False

    if not files_ok:
        print("\n‚ö†Ô∏è  System files are missing")
        return False

    # –ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ü–∏–∏ –±–∞–≥–æ–≤
    detector = SpecificBugDetector()
    bugs_found = detector.run_all_bug_tests()

    print("\n" + "=" * 60)
    print("üéØ FINAL VERDICT")
    print("=" * 60)

    if bugs_found and len(detector.bugs_found) == 0:
        print("üéâ System appears to be bug-free!")
        print("‚úÖ All specific bug tests passed")
        verdict = "READY FOR PRODUCTION"
    elif len(detector.bugs_found) <= 2:
        print("‚ö†Ô∏è  Minor issues detected")
        print("üü° System is mostly stable but needs attention")
        verdict = "NEEDS MINOR FIXES"
    elif len(detector.bugs_found) <= 5:
        print("üü† Several issues detected")
        print("‚ö†Ô∏è  System needs significant improvements")
        verdict = "NEEDS MAJOR FIXES"
    else:
        print("üî¥ Critical issues detected")
        print("‚ùå System is not ready for production")
        verdict = "NOT PRODUCTION READY"

    print(f"\nüè∑Ô∏è  STATUS: {verdict}")

    # –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
    print("\nüìã NEXT STEPS:")
    if len(detector.bugs_found) == 0:
        print("   1. Deploy to staging environment")
        print("   2. Run load testing")
        print("   3. Monitor in production")
    else:
        print("   1. Fix identified bugs")
        print("   2. Re-run this test suite")
        print("   3. Consider code review")
        print("   4. Add unit tests for fixed bugs")

    return len(detector.bugs_found) == 0


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
