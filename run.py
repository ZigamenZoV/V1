import cv2
import numpy as np
import time
import os
import json
from datetime import datetime
from pathlib import Path

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
try:
    from video_source_selector import select_video_source

    HAS_SELECTOR = True
except ImportError:
    HAS_SELECTOR = False

from people_counter import (
    YOLODetector, DeepSORTTracker, LineCounter,
    Visualizer, Logger, Config, FrameStats
)


class PeopleCounterSystem:
    def __init__(self):
        self.config = Config()
        self.config.validate()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ
        self.video_source = self.load_video_settings()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã...")
        self.detector = YOLODetector(self.config)
        self.tracker = DeepSORTTracker(self.config)
        self.counter = LineCounter(self.config)
        self.visualizer = Visualizer(self.config)
        self.logger = Logger(self.config)

        self.cap = None
        self.frame_count = 0
        self.mirror_mode = self.config.MIRROR_IMAGE
        self.running = True
        self.last_fps_time = time.time()
        self.fps_counter = 0

    def load_video_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–¥–µ–æ"""
        settings_file = Path("video_settings.json")

        if settings_file.exists():
            try:
                with open(settings_file, 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {settings['video_source']}")
                return settings['video_source']
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

        # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä
        if HAS_SELECTOR:
            print("üéØ –ó–∞–ø—É—Å–∫ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤–∏–¥–µ–æ...")
            return select_video_source()
        else:
            print("‚ö†Ô∏è  –°–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–º–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return 0

    def initialize_video(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º"""
        print(f"üé• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞: {self.video_source}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ –∫–æ–Ω—Ñ–∏–≥
        self.config.VIDEO_SOURCE = self.video_source

        self.cap = cv2.VideoCapture(self.video_source)

        if not self.cap.isOpened():
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫: {self.video_source}")

            # –ü—Ä–æ–±—É–µ–º fallback –Ω–∞ –∫–∞–º–µ—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            print("üîÑ –ü—Ä–æ–±—É–µ–º –∫–∞–º–µ—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
            self.cap = cv2.VideoCapture(0)
            self.config.VIDEO_SOURCE = 0

            if not self.cap.isOpened():
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –Ω–∏ –æ–¥–∏–Ω –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫!")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∏–¥–µ–æ
        self.cap.set(cv2.CAP_PROP_FPS, self.config.TARGET_FPS)

        width = int(self.cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        height = int(self.cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        fps = self.cap.get(cv2.CAP_PROP_FPS)

        print(f"‚úÖ –í–∏–¥–µ–æ–ø–æ—Ç–æ–∫ –æ—Ç–∫—Ä—ã—Ç: {width}x{height} @ {fps:.1f} FPS")
        print(f"üìπ –ò—Å—Ç–æ—á–Ω–∏–∫: {self.video_source}")

    def process_frame(self, frame: np.ndarray) -> np.ndarray:
        """
        –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞: –¥–µ—Ç–µ–∫—Ü–∏—è -> —Ç—Ä–µ–∫–∏–Ω–≥ -> –ø–æ–¥—Å—á–µ—Ç -> –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        """
        start_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–¥—Ä–∞
        if frame is None or frame.size == 0:
            print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∫–∞–¥—Ä")
            return np.zeros((480, 640, 3), dtype=np.uint8)

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–µ—Ä–∫–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if self.mirror_mode:
            frame = cv2.flip(frame, 1)

        # 1. –î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        detections, detection_time = self.detector.detect(frame)

        # 2. –¢—Ä–µ–∫–∏–Ω–≥ –æ–±—ä–µ–∫—Ç–æ–≤
        tracked_detections, track_infos = self.tracker.update(detections, frame)

        # 3. –ü–æ–¥—Å—á–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –ª–∏–Ω–∏–∏
        count_stats = self.counter.update(tracked_detections, {})

        # 4. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        processed_frame = frame.copy()

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–π –∏ —Ç—Ä–µ–∫–æ–≤
        processed_frame = self.visualizer.draw_detections(processed_frame, tracked_detections)

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –¥–≤–∏–∂–µ–Ω–∏—è
        processed_frame = self.visualizer.draw_trajectories(processed_frame, track_infos)

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ª–∏–Ω–∏–∏ –ø–æ–¥—Å—á–µ—Ç–∞
        processed_frame = self.visualizer.draw_line(processed_frame)

        # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–¥—Ä–∞
        processing_time = time.time() - start_time
        fps = 1.0 / processing_time if processing_time > 0 else 0

        frame_stats = FrameStats(
            frame_number=self.frame_count,
            processing_time=processing_time,
            detections_count=len(detections),
            tracks_count=len(track_infos),
            fps=fps
        )

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        processed_frame = self.visualizer.draw_info_panel(processed_frame, frame_stats, count_stats)

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        processed_frame = self.visualizer.draw_controls_info(processed_frame)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.logger.log_frame(frame_stats, count_stats)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ FPS –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        self.visualizer.update_fps(processing_time)

        return processed_frame

    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
        try:
            self.initialize_video()
            print("\n" + "=" * 50)
            print("üöÄ –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ª—é–¥–µ–π –∑–∞–ø—É—â–µ–Ω–∞!")
            print("=" * 50)
            print("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:")
            print("  Q - –í—ã—Ö–æ–¥")
            print("  R - –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤")
            print("  M - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–µ—Ä–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
            print("  WASD - –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ª–∏–Ω–∏–∏ –ø–æ–¥—Å—á–µ—Ç–∞")
            print("  L - –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            print("  C - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
            print("  S - –ò–∑–º–µ–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–∏–¥–µ–æ (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫)")
            print("-" * 50)

            while self.running:
                ret, frame = self.cap.read()
                if not ret:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä")
                    break

                processed_frame = self.process_frame(frame)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–∞–¥—Ä –≤–∞–ª–∏–¥–Ω—ã–π
                if processed_frame is not None and processed_frame.size > 0:
                    cv2.imshow('People Counter System', processed_frame)
                else:
                    print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –∫–∞–¥—Ä–∞")

                key = cv2.waitKey(1) & 0xFF
                if key != 255:
                    self.handle_keyboard(key)

                self.frame_count += 1

        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
        finally:
            self.cleanup()

    def handle_keyboard(self, key: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–º–µ–Ω—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        if key == ord('q'):
            self.running = False
            print("‚èπÔ∏è  –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        elif key == ord('r'):
            self.counter.reset()
            print("üîÑ –°—á–µ—Ç—á–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã")
        elif key == ord('m'):
            self.mirror_mode = not self.mirror_mode
            print(f"üîÑ –ó–µ—Ä–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: {'–≤–∫–ª—é—á–µ–Ω' if self.mirror_mode else '–≤—ã–∫–ª—é—á–µ–Ω'}")
        elif key == ord('s'):  # –ù–æ–≤–∞—è –∫–ª–∞–≤–∏—à–∞ - —Å–º–µ–Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            print("üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤–∏–¥–µ–æ...")
            self.running = False
        elif key == ord('w'):
            self.counter.move_line(0, -10)
            print("‚¨ÜÔ∏è –õ–∏–Ω–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤–≤–µ—Ä—Ö")
        elif key == ord('s'):
            self.counter.move_line(0, 10)
            print("‚¨áÔ∏è –õ–∏–Ω–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤–Ω–∏–∑")
        elif key == ord('a'):
            self.counter.move_line(-10, 0)
            print("‚¨ÖÔ∏è –õ–∏–Ω–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤–ª–µ–≤–æ")
        elif key == ord('d'):
            self.counter.move_line(10, 0)
            print("‚û°Ô∏è –õ–∏–Ω–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤–ø—Ä–∞–≤–æ")
        elif key == ord('l'):
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            export_path = f"statistics_{timestamp}.json"
            self.logger.export_summary(export_path)
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ {export_path}")
        elif key == ord('c'):
            stats = self.counter.stats
            print(f"üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –í–æ—à–ª–æ {stats['in']}, –í—ã—à–ª–æ {stats['out']}, –í–Ω—É—Ç—Ä–∏ {stats['inside']}")

    def cleanup(self):
        """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        print("üßπ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        if self.cap is not None:
            self.cap.release()
        cv2.destroyAllWindows()
        print("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    first_run = True

    while True:
        try:
            if first_run:
                print("üéØ People Counter System v2.0")
                print("üìπ –¢–µ–ø–µ—Ä—å —Å –≤—ã–±–æ—Ä–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤–∏–¥–µ–æ!")
                first_run = False

            system = PeopleCounterSystem()
            system.run()

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª 'S' –¥–ª—è —Å–º–µ–Ω—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            if hasattr(system, 'running') and not system.running:
                print("\n" + "=" * 50)
                print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å –Ω–æ–≤—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –≤–∏–¥–µ–æ...")
                print("=" * 50)
                continue
            else:
                break

        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            print("1. –ù–∞–ª–∏—á–∏–µ –∫–∞–º–µ—Ä—ã/—Ñ–∞–π–ª–∞")
            print("2. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
            print("3. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
            break


if __name__ == "__main__":
    main()