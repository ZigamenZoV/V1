"""
–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤–∏–¥–µ–æ
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import cv2
import os
import sys
from pathlib import Path


class VideoSourceSelector:
    def __init__(self):
        self.selected_source = None
        self.selected_value = 0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        try:
            self.root = tk.Tk()
            self.root.title("–í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤–∏–¥–µ–æ - People Counter")
            self.root.geometry("600x500")
            self.root.resizable(False, False)

            # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
            self.center_window()
            self.setup_ui()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GUI: {e}")
            # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–º–µ—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.selected_value = 0

    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        try:
            self.root.update_idletasks()
            width = self.root.winfo_width()
            height = self.root.winfo_height()
            x = (self.root.winfo_screenwidth() // 2) - (width // 2)
            y = (self.root.winfo_screenheight() // 2) - (height // 2)
            self.root.geometry(f'{width}x{height}+{x}+{y}')
        except Exception as e:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–∫–Ω–æ - {e}")

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title_label = tk.Label(
                self.root,
                text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤–∏–¥–µ–æ",
                font=("Arial", 16, "bold"),
                pady=20
            )
            title_label.pack()

            # –û–ø–∏—Å–∞–Ω–∏–µ
            desc_label = tk.Label(
                self.root,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–∏–¥–µ–æ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥—Å—á–µ—Ç–∞ –ª—é–¥–µ–π:",
                font=("Arial", 10),
                pady=10
            )
            desc_label.pack()

            # –§—Ä–µ–π–º —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—ã–±–æ—Ä–∞
            options_frame = ttk.LabelFrame(self.root, text="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏", padding=15)
            options_frame.pack(padx=20, pady=10, fill="both", expand=True)

            # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫
            self.source_var = tk.StringVar(value="camera")

            # –í–∞—Ä–∏–∞–Ω—Ç 1: –í–µ–±-–∫–∞–º–µ—Ä—ã
            self.camera_var = tk.StringVar(value="0")
            camera_frame = ttk.Frame(options_frame)
            camera_frame.pack(fill="x", pady=5)

            tk.Radiobutton(
                camera_frame,
                text="üì∑ –í–µ–±-–∫–∞–º–µ—Ä–∞:",
                variable=self.source_var,
                value="camera"
            ).pack(side="left")

            # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä
            available_cameras = self.detect_available_cameras()
            camera_combobox = ttk.Combobox(
                camera_frame,
                textvariable=self.camera_var,
                values=available_cameras,
                state="readonly",
                width=30
            )
            camera_combobox.pack(side="left", padx=10)
            if available_cameras:
                camera_combobox.set(available_cameras[0])

            # –í–∞—Ä–∏–∞–Ω—Ç 2: –í–∏–¥–µ–æ—Ñ–∞–π–ª
            self.file_path = tk.StringVar()
            file_frame = ttk.Frame(options_frame)
            file_frame.pack(fill="x", pady=5)

            tk.Radiobutton(
                file_frame,
                text="üìÅ –í–∏–¥–µ–æ—Ñ–∞–π–ª",
                variable=self.source_var,
                value="file"
            ).pack(side="left")

            file_entry = tk.Entry(file_frame, textvariable=self.file_path, width=30)
            file_entry.pack(side="left", padx=5)

            tk.Button(
                file_frame,
                text="–û–±–∑–æ—Ä...",
                command=self.browse_file
            ).pack(side="left")

            # –í–∞—Ä–∏–∞–Ω—Ç 3: IP-–∫–∞–º–µ—Ä–∞
            self.ip_url = tk.StringVar(value="rtsp://")
            ip_frame = ttk.Frame(options_frame)
            ip_frame.pack(fill="x", pady=5)

            tk.Radiobutton(
                ip_frame,
                text="üåê IP-–∫–∞–º–µ—Ä–∞",
                variable=self.source_var,
                value="ip"
            ).pack(side="left")

            ip_entry = tk.Entry(ip_frame, textvariable=self.ip_url, width=40)
            ip_entry.pack(side="left", padx=5)

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            button_frame = ttk.Frame(self.root)
            button_frame.pack(pady=20)

            tk.Button(
                button_frame,
                text="‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É",
                command=self.launch_system,
                bg="green",
                fg="white",
                font=("Arial", 10, "bold"),
                padx=20
            ).pack(side="left", padx=10)

            tk.Button(
                button_frame,
                text="‚ùå –í—ã—Ö–æ–¥",
                command=self.close_app,
                bg="red",
                fg="white",
                padx=20
            ).pack(side="left", padx=10)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ UI —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.selected_value = 0

    def detect_available_cameras(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–µ—Ä"""
        cameras = []
        print("üîç –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–µ—Ä...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 –∏–Ω–¥–µ–∫—Å–æ–≤ –∫–∞–º–µ—Ä (—É–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
            for i in range(5):
                cap = cv2.VideoCapture(i)
                if cap.isOpened():
                    ret, frame = cap.read()
                    if ret and frame is not None:
                        camera_name = f"–ö–∞–º–µ—Ä–∞ {i}"
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                        try:
                            width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
                            height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
                            if width > 0 and height > 0:
                                camera_name += f" ({width}x{height})"
                        except:
                            pass

                        cameras.append(f"{camera_name} (ID: {i})")
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ {camera_name}")
                    cap.release()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–º–µ—Ä: {e}")

        if not cameras:
            cameras = ["–ö–∞–º–µ—Ä–∞ 0 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) (ID: 0)"]
            print("‚ö†Ô∏è –ö–∞–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

        return cameras

    def browse_file(self):
        """–í—ã–±–æ—Ä –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥"""
        try:
            file_types = [
                ("–í–∏–¥–µ–æ —Ñ–∞–π–ª—ã", "*.mp4 *.avi *.mov *.mkv *.wmv"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]

            filename = filedialog.askopenfilename(
                title="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª",
                filetypes=file_types
            )

            if filename:
                self.file_path.set(filename)
                self.source_var.set("file")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞: {e}")

    def validate_selection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        try:
            source_type = self.source_var.get()

            if source_type == "camera":
                return True

            elif source_type == "file":
                if not self.file_path.get():
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª!")
                    return False
                if not os.path.exists(self.file_path.get()):
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                    return False
                return True

            elif source_type == "ip":
                url = self.ip_url.get()
                if not url.startswith(('rtsp://', 'http://', 'https://')):
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL (rtsp://, http:// –∏–ª–∏ https://)")
                    return False
                return True

            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–∏–¥–µ–æ!")
                return False

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False

    def get_video_source(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è OpenCV"""
        try:
            source_type = self.source_var.get()

            if source_type == "camera":
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞–º–µ—Ä—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
                camera_str = self.camera_var.get()
                if "(ID: " in camera_str:
                    camera_id = int(camera_str.split("(ID: ")[1].replace(")", ""))
                    return camera_id
                return 0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

            elif source_type == "file":
                return self.file_path.get()

            elif source_type == "ip":
                return self.ip_url.get()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {e}")

        return 0  # fallback

    def launch_system(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            if not self.validate_selection():
                return

            self.selected_value = self.get_video_source()
            self.save_settings()

            if hasattr(self, 'root'):
                self.root.destroy()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            self.selected_value = 0  # fallback

    def close_app(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            if hasattr(self, 'root'):
                self.root.quit()
                self.root.destroy()
            sys.exit(0)
        except:
            sys.exit(0)

    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª"""
        try:
            settings = {
                'video_source': self.selected_value,
                'source_type': self.source_var.get() if hasattr(self, 'source_var') else 'camera',
                'last_used': str(Path(__file__).parent / "last_settings.json")
            }

            import json
            config_path = Path(__file__).parent / "video_settings.json"

            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(settings, f, indent=2, ensure_ascii=False)

            print(f"üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {self.selected_value}")

        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤—ã–±–æ—Ä–∞"""
        try:
            if hasattr(self, 'root'):
                self.root.mainloop()
            return self.selected_value
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ GUI: {e}")
            return 0


def select_video_source():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤–∏–¥–µ–æ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        selector = VideoSourceSelector()
        return selector.run()
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞: {e}")
        print("–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞–º–µ—Ä–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (ID: 0)")
        return 0


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ tkinter –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
def check_tkinter_available():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ tkinter"""
    try:
        import tkinter
        return True
    except ImportError:
        return False


if __name__ == "__main__":
    if not check_tkinter_available():
        print("‚ùå tkinter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install tk")
        print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–º–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (ID: 0)")
        source = 0
    else:
        source = select_video_source()

    print(f"–í—ã–±—Ä–∞–Ω –∏—Å—Ç–æ—á–Ω–∏–∫: {source}")